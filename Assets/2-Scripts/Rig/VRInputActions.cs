//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/2-Scripts/Rig/VRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputActions"",
    ""maps"": [
        {
            ""name"": ""RhythmRift Controls"",
            ""id"": ""93399a28-6482-4aa1-bc53-4aa2c05ab4e0"",
            ""actions"": [
                {
                    ""name"": ""Pause Game"",
                    ""type"": ""Button"",
                    ""id"": ""b0f0ee2d-317c-42a9-9657-fa81c6d379d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReturnToMainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""273c211a-5f19-4e67-945c-93bcebb012ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ed09592-8d49-4b2b-a4f6-74cf8c4e5af2"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fab53955-d261-4e9e-9be0-8acb85a1f681"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReturnToMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RhythmRift Controls
        m_RhythmRiftControls = asset.FindActionMap("RhythmRift Controls", throwIfNotFound: true);
        m_RhythmRiftControls_PauseGame = m_RhythmRiftControls.FindAction("Pause Game", throwIfNotFound: true);
        m_RhythmRiftControls_ReturnToMainMenu = m_RhythmRiftControls.FindAction("ReturnToMainMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RhythmRift Controls
    private readonly InputActionMap m_RhythmRiftControls;
    private IRhythmRiftControlsActions m_RhythmRiftControlsActionsCallbackInterface;
    private readonly InputAction m_RhythmRiftControls_PauseGame;
    private readonly InputAction m_RhythmRiftControls_ReturnToMainMenu;
    public struct RhythmRiftControlsActions
    {
        private @VRInputActions m_Wrapper;
        public RhythmRiftControlsActions(@VRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseGame => m_Wrapper.m_RhythmRiftControls_PauseGame;
        public InputAction @ReturnToMainMenu => m_Wrapper.m_RhythmRiftControls_ReturnToMainMenu;
        public InputActionMap Get() { return m_Wrapper.m_RhythmRiftControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RhythmRiftControlsActions set) { return set.Get(); }
        public void SetCallbacks(IRhythmRiftControlsActions instance)
        {
            if (m_Wrapper.m_RhythmRiftControlsActionsCallbackInterface != null)
            {
                @PauseGame.started -= m_Wrapper.m_RhythmRiftControlsActionsCallbackInterface.OnPauseGame;
                @PauseGame.performed -= m_Wrapper.m_RhythmRiftControlsActionsCallbackInterface.OnPauseGame;
                @PauseGame.canceled -= m_Wrapper.m_RhythmRiftControlsActionsCallbackInterface.OnPauseGame;
                @ReturnToMainMenu.started -= m_Wrapper.m_RhythmRiftControlsActionsCallbackInterface.OnReturnToMainMenu;
                @ReturnToMainMenu.performed -= m_Wrapper.m_RhythmRiftControlsActionsCallbackInterface.OnReturnToMainMenu;
                @ReturnToMainMenu.canceled -= m_Wrapper.m_RhythmRiftControlsActionsCallbackInterface.OnReturnToMainMenu;
            }
            m_Wrapper.m_RhythmRiftControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
                @ReturnToMainMenu.started += instance.OnReturnToMainMenu;
                @ReturnToMainMenu.performed += instance.OnReturnToMainMenu;
                @ReturnToMainMenu.canceled += instance.OnReturnToMainMenu;
            }
        }
    }
    public RhythmRiftControlsActions @RhythmRiftControls => new RhythmRiftControlsActions(this);
    public interface IRhythmRiftControlsActions
    {
        void OnPauseGame(InputAction.CallbackContext context);
        void OnReturnToMainMenu(InputAction.CallbackContext context);
    }
}
